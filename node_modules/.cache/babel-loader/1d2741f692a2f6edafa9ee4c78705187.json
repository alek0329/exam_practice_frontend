{"ast":null,"code":"import { myUrl } from \"./settings\";\nconst URL = myUrl;\n\nfunction handleHtttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nfunction apiFacade() {\n  const login = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(URL + \"/api/login\", options).then(handleHtttpErrors).then(res => {\n      setToken(res.token);\n      sessionStorage.setItem(\"username\", user);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const fetchAny = someUrl => {\n    const options = makeOptions(\"GET\", true);\n    return fetch(URL + someUrl, options).then(handleHtttpErrors);\n  };\n\n  const setToken = token => {\n    sessionStorage.setItem(\"jwtToken\", token);\n    const jwtData = token.split(\".\")[1];\n    const decodedJwtJsonData = window.atob(jwtData);\n    const decodedJwtData = JSON.parse(decodedJwtJsonData);\n    const roles = decodedJwtData.roles;\n    sessionStorage.setItem(\"roles\", JSON.stringify(roles));\n  };\n\n  const getToken = () => {\n    return sessionStorage.getItem(\"jwtToken\");\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() !== null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem(\"jwtToken\");\n    sessionStorage.removeItem(\"username\");\n    sessionStorage.removeItem(\"roles\");\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    let opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout,\n    handleHtttpErrors,\n    fetchAny\n  };\n}\n\nexport const facade = apiFacade();","map":{"version":3,"sources":["C:/Users/Alek/Dropbox/Dev/3.sem/24h_exam/24h_exam_frontend/src/apiFacade.js"],"names":["myUrl","URL","handleHtttpErrors","res","ok","Promise","reject","status","fullError","json","apiFacade","login","user","password","options","makeOptions","username","fetch","then","setToken","token","sessionStorage","setItem","catch","error","console","log","fetchAny","someUrl","jwtData","split","decodedJwtJsonData","window","atob","decodedJwtData","JSON","parse","roles","stringify","getToken","getItem","loggedIn","logout","removeItem","method","addToken","body","opts","headers","Accept","facade"],"mappings":"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","sourcesContent":["import { myUrl } from \"./settings\";\r\n\r\nconst URL = myUrl;\r\nfunction handleHtttpErrors(res) {\r\n  if (!res.ok) {\r\n    return Promise.reject({ status: res.status, fullError: res.json() });\r\n  }\r\n\r\n  return res.json();\r\n}\r\nfunction apiFacade() {\r\n  const login = (user, password) => {\r\n    const options = makeOptions(\"POST\", true, {\r\n      username: user,\r\n      password: password,\r\n    });\r\n\r\n    return fetch(URL + \"/api/login\", options)\r\n      .then(handleHtttpErrors)\r\n      .then((res) => {\r\n        setToken(res.token);\r\n        sessionStorage.setItem(\"username\", user);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const fetchAny = (someUrl) => {\r\n    const options = makeOptions(\"GET\", true);\r\n    return fetch(URL + someUrl, options).then(handleHtttpErrors);\r\n  };\r\n  const setToken = (token) => {\r\n    sessionStorage.setItem(\"jwtToken\", token);\r\n\r\n    const jwtData = token.split(\".\")[1];\r\n    const decodedJwtJsonData = window.atob(jwtData);\r\n    const decodedJwtData = JSON.parse(decodedJwtJsonData);\r\n\r\n    const roles = decodedJwtData.roles;\r\n    sessionStorage.setItem(\"roles\", JSON.stringify(roles));\r\n  };\r\n  const getToken = () => {\r\n    return sessionStorage.getItem(\"jwtToken\");\r\n  };\r\n  const loggedIn = () => {\r\n    const loggedIn = getToken() !== null;\r\n    return loggedIn;\r\n  };\r\n  const logout = () => {\r\n    sessionStorage.removeItem(\"jwtToken\");\r\n    sessionStorage.removeItem(\"username\");\r\n    sessionStorage.removeItem(\"roles\");\r\n  };\r\n\r\n  const makeOptions = (method, addToken, body) => {\r\n    let opts = {\r\n      method: method,\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n    if (addToken && loggedIn()) {\r\n      opts.headers[\"x-access-token\"] = getToken();\r\n    }\r\n    if (body) {\r\n      opts.body = JSON.stringify(body);\r\n    }\r\n    return opts;\r\n  };\r\n  return {\r\n    makeOptions,\r\n    setToken,\r\n    getToken,\r\n    loggedIn,\r\n    login,\r\n    logout,\r\n    handleHtttpErrors,\r\n    fetchAny,\r\n  };\r\n}\r\nexport const facade = apiFacade();\r\n"]},"metadata":{},"sourceType":"module"}